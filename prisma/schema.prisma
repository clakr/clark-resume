generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id        String      @id @default(cuid())
  type      ContactType
  createdAt DateTime    @default(now())
  desc      String
}

model About {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  desc      String
}

model Education {
  id             String       @id @default(cuid())
  organizationId String
  degree         String?
  thesis         String?
  awards         String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Experience {
  id              String           @id @default(cuid())
  organizationId  String
  createdAt       DateTime         @default(now())
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  experienceDescs ExperienceDesc[]
}

model ExperienceDesc {
  id           String     @id @default(cuid())
  experienceId String
  desc         String
  createdAt    DateTime   @default(now())
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

model Leadership {
  id                 String              @id @default(cuid())
  organizationId     String
  createdAt          DateTime            @default(now())
  organization       Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  leadershipProjects LeadershipProject[]
}

model LeadershipProject {
  id             String     @id @default(cuid())
  leadershipId   String
  course         String
  name           String
  purpose        String?
  otherPositions String?
  createdAt      DateTime   @default(now())
  leadership     Leadership @relation(fields: [leadershipId], references: [id], onDelete: Cascade)
}

model Organization {
  id            String       @id @default(cuid())
  position      String
  name          String
  location      String
  timeframeFrom DateTime
  timeframeTo   DateTime?
  createdAt     DateTime     @default(now())
  educations    Education[]
  experiences   Experience[]
  leaderships   Leadership[]
}

model Miscellaneous {
  id        String            @id @default(cuid())
  name      String
  type      MiscellaneousType
  createdAt DateTime          @default(now())
}

enum ContactType {
  ADDRESS
  EMAIL
  PHONE
}

enum MiscellaneousType {
  TECHNICAL
  LANGUAGE
  INTEREST
}
